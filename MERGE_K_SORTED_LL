class mycomp{
      public:
   bool operator()(Node *a,Node *b)
   {
       return a->data>b->data;
   }
};
class Solution{
  public:
    //Function to merge K sorted linked list.
    struct oper{
    static bool comp(Node* a, Node* b)
    {
        return a->data>b->data;
    }
    };
    Node * mergeKLists(Node *arr[], int K)
    {
        priority_queue<Node*, vector<Node*>, mycomp> min_heap;  //here mycom is  class in which function comp sort in decresing because greater<int> for decreasing
        for(int i=0; i<K; i++)
        {
            min_heap.push(arr[i]);   // push starting node of each and every list 
        }
        Node* dummy = new Node(0);
        Node* res = dummy;
        while(min_heap.empty()==false)
        {
            Node* t= min_heap.top();
            min_heap.pop();
            res->next= t;
            res=res->next;
            if(t->next!=NULL)
            {
                min_heap.push(t->next);
            }
            
        }
        return dummy->next;
    }  // TC o(n*k(log(k)) n*k = total number of nodes sc o(k)
