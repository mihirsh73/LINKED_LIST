
Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int l, int r) {
        if(l==r)
        {
            return head;
        }
         ListNode dummy(0);
dummy.next=head;                                                         // TC O(N) SC O(1)
ListNode* prev=&dummy;
while(l>1){
    prev=prev->next;
    l--;
    r--;
}
ListNode* curr=prev->next;
ListNode* tail=prev->next;
ListNode* p=NULL;
while(r>0){
    auto temp=curr->next;
    curr->next=p;
    p=curr;
    curr=temp;
    r--;
}
tail->next=curr;
prev->next=p;
return dummy.next;
        /*vector<int> res;
        ListNode* curr=head;
        while(curr!=NULL)
        {
            res.push_back(curr->val);
            curr=curr->next;                         // TC O(N) SC O(N);
        }
        reverse(res.begin()+l-1,res.begin()+r);
        curr=head;
        for(int i=0; i<res.size(); i++)
        {
            curr->val=res[i];
            curr=curr->next;
        }
        return head;*/
        
        
    }
};
