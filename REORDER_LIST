// You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head)
 {
     ListNode* curr=head;
     ListNode* prev=NULL;
     ListNode* next;
     while(curr!=NULL)
     {
         next=curr->next;
         curr->next=prev;
         prev=curr;
         curr=next;
     }
     return prev;
     
 }
    void reorderList(ListNode* A) {
         ListNode* fast=A;
    ListNode* slow=A;
    while(fast->next!=NULL && fast->next->next!=NULL)
    {
        fast=fast->next->next;
        slow=slow->next;
    }
    ListNode* h2=slow->next;
    slow->next=NULL;               // break the list into two half
   
    ListNode* h1=A;
     h2= reverse(h2);
    ListNode* d= new ListNode(0);        // create a dummy node
    d->next=A;
    ListNode* curr=d;
   while(h1!=NULL || h2!=NULL)           // merge the two linked list
   {
       if(h1!=NULL)
       {
           curr->next=h1;
           curr=curr->next;
           h1=h1->next;
       }
       if(h2!=NULL)
       {
           curr->next=h2;
           curr=curr->next;
           h2=h2->next;
       }
   }
   A= d->next;
        
    }
};// TC O(N) SC O(1)
